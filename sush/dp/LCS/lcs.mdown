LCS memoized code
// https://leetcode.com/problems/longest-common-subsequence/
```java
import java.util.Arrays;
class Solution {
    int dp[][] = new int[1001][1001]; 
    public int LCS(String x, String y, int m, int n){
        if(m==0 || n==0){
            return 0;
        }
        if(dp[m][n]!=-1) return dp[m][n];
        if (x.charAt(m-1)==y.charAt(n-1)){
            return dp[m][n] = 1 + LCS(x, y, m-1, n-1);
        } else {
            return dp[m][n] = Math.max(LCS(x, y, m-1, n), LCS(x, y , m, n-1));
        }
    }
    public int longestCommonSubsequence(String text1, String text2) {
  	// general code to fill a 2d array with -1        
  	for(int[] row: dp){
        Arrays.fill(row, -1);
    }
    int ans = LCS(text1, text2, text1.length(), text2.length());
    return ans;
    }
}
```

LCS tabulation approach

```java
// first fill the first row and column with 0
for(int i=1; i < x+1; i++) {
    for(int j=1; j < y+1; j++) {
	if(s1.charAt(i-1)==s2.charAt(j-1)){
	    dp[i][j] = 1 + dp[i-1][j-1];
	} else {
	    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
	}
    }
}
```
Lowest Common Substring
```java
// first fill the first row and column with 0
for(int i=1; i < x+1; i++) {
    for(int j=1; j < y+1; j++) {
	if(s1.charAt(i-1)==s2.charAt(j-1)){
	    dp[i][j] = 1 + dp[i-1][j-1];
	} else {
	    dp[i][j] = 0;
	}
    }
}
```
Printing LCS
```java
// fill the dp table by LCS logic
int i = x, j = y;
StringBuilder res = new StringBuilder();

// start from last cell and travel to the first cell
while (i > 0 && j > 0) {
    if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
        res.append(str1.charAt(i - 1));
        i--;
        j--;
    } else { // if values are unequal, go wherever the value was higher (see the diagram and you'll understand)
        if (dp[i - 1][j] > dp[i][j - 1]) {
            i--;
        } else {
            j--;
        }
    }
}

return res.reverse().toString();
```
Shortest Common Supersequence
```
int scs = x + y - lcs;
```
Min insertions/deletions to convert a to b
```
heap -> pea
insert p, delete h, lcs (ea), delete p
Remove lcs length from both of the string lengths and add them
```
```java
int ans = x + y - 2*lcs;
```
Longest Palindromic Subsequence
```
Since we have only one string, to apply LCS we can just reverse the string and store it in a new variable
Find LCS between them and we have the answer
```
Min no of deletions required to make a string palindrome
```
int ans = str1.length() - (longest palindromic subsequence)
``
