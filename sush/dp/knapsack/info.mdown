0/1 Knapsack
```java
// initialisation
for(int i=0; i <N+1; i++) {
    for(int j=0; j<W+1; j++) {
        if(i==0 || j==0) {
            dp[i][j] = 0;
        }
    }
}
for(int i=1; i <N+1; i++) {
    for(int j=1; j<W+1; j++) {
        if(wt[i-1]<=j) {
            dp[i][j] = Math.max(val[i-1] + dp[i-1][j-wt[i-1]], dp[i-1][j]);
        } else {
            dp[i][j] = dp[i-1][j];
        }
    }
}
```
rod cutting
```java
int[][] dp = new int[n + 1][n + 1];
// set first row and column with 0
for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= n; j++) {
        if (i <= j) {
            dp[i][j] = Math.max(dp[i - 1][j], price[i - 1] + dp[i][j - i]);
        } else {
            dp[i][j] = dp[i - 1][j];
        }
    }
}

```
coin change I
```java
for(int j=0; j<=sum; j++){
    dp[0][j] = 0;
}
for(int i=0; i<=N; i++) {
    dp[i][0] = 1;
}
for(int i=1; i <= N; i++) {
    for(int j=1; j<= sum; j++) {
        if(coins[i-1]<= j) {
            dp[i][j] = dp[i-1][j] + dp[i][j-coins[i-1]]; // dp[i] because this is an unbounded knapsack
        } else {
            dp[i][j] = dp[i-1][j];
        }
    }
}

```
coin change II
```java
// initialise first row
for(int j=1; j<=amount; j++){
    dp[0][j] = Integer.MAX_VALUE - 1;
}
for(int i=0; i<=l; i++) {
    dp[i][0] = 0;
}

// initialise second row
for(int j=1; j <= amount; j++) {
    if(amount%coins[0]==0) {
        dp[1][j] = amount/coins[0];
    } else {
        dp[1][j] = Integer.MAX_VALUE - 1;
    }
}

for(int i=1; i <= l; i++) {
    for(int j=1; j <= amount; j++) {
        if(coins[i-1] <= j) {
            dp[i][j] = Math.min(dp[i][j-coins[i-1]] + 1, dp[i-1][j]);
         } else {
             dp[i][j] = dp[i-1][j];
         }
    }
}
if(dp[l][amount]>=Integer.MAX_VALUE - 1){
    return -1;
}
```
