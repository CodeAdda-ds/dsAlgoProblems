Tree DSA Snippets-
  
 Traversals
  
```java
  // Inorder - L , N, R
  void printInorder(Node node)
    {
        if (node == null)
            return;
 
        printInorder(node.left);
        System.out.print(node.key + " ");
        printInorder(node.right);
    }
```
```java
  // Preorder - N, L, R
  void printPreorder(Node node)
    {
        if (node == null)
            return;
        System.out.print(node.key + " ");
        printPreorder(node.left);
        printPreorder(node.right);
    }
```
```java
  // Postorder - L, R, N
  void printPostorder(Node node)
    {
        if (node == null)
            return;
        printPostorder(node.left);
        printPostorder(node.right);
        System.out.print(node.key + " ");
    }
```
Level Order Traversal
```java
Queue <Node> q = new LinkedList<>();// in queue we store nodes or roots 
q.add(node); 

while(q.size() > 0 ){ 
   Node temp = q.remove(); // remove the node and add it to the ans
   
   ans.add(temp.data); 
   // if node has children, add them to queue and perform the same operation for them
   if(temp.left != null){
   q.add(temp.left);} 
   
   if(temp.right != null){
   q.add(temp.right);}
   
}
```
Current Level Node Traversal
```java
// Print nodes at a current level 
void printCurrentLevel(TreeNode root, int level)
{
    if (root == NULL)
        return;
    if (level == 1)
        print(root.data)
    else if (level > 1) {
        printCurrentLevel(root.left, level - 1);
        printCurrentLevel(root.right, level - 1);
    }
}
```
Boundary Traversal of Tree- https://www.geeksforgeeks.org/boundary-traversal-of-binary-tree/
```java
void printBoundary(Node node)
    {
        if (node == null)
            return;
 
        System.out.print(node.data + " ");
 
        // Print the left boundary in top-down manner.
        printBoundaryLeft(node.left);
 
        // Print all leaf nodes
        printLeaves(node.left);
        printLeaves(node.right);
 
        // Print the right boundary in bottom-up manner
        printBoundaryRight(node.right);
    }
```
Diagonal traversal of Tree
```java
  //we are using preorder here but we can use any order travesal
public static void printDiagonal(Node node, int diagonal,
                                    Map<Integer, List<Integer>> map)
    {
        if (node == null) {
            return;
        }
 
        // insert the current node into the current diagonal
        map.putIfAbsent(diagonal, new ArrayList<>());
        map.get(diagonal).add(node.data);
 
        // recur for the left subtree by increasing diagonal by 1
        printDiagonal(node.left, diagonal + 1, map);
 
        // recur for the right subtree with the same diagonal
        printDiagonal(node.right, diagonal, map);
    }
```
```java
// iterative approach
ArrayList<Integer> ans = new ArrayList<>();
Queue<Node> q = new LinkedList<>();
q.add(root);
while (!q.isEmpty()) {
    Node cur = q.remove();
    Node temp = cur;
    while (temp != null) {
        if (temp.left != null) {
            q.add(temp.left);
        }
        ans.add(temp.data);
        temp = temp.right;
    }
}
```
Vertical Traversal of Tree
```java
  //we are using preorder here but we can use any order travesal
public static void printVertical(Node node, int dist,
                                  Map<Integer, List<Integer>> map)
  {
      if (node == null) {
          return;
      }

      // insert nodes present at a current horizontal distance into the map
      insertIntoHashMap(map, dist, node.key);

      // recur for the left subtree by decreasing horizontal distance by 1
      printVertical(node.left, dist - 1, map);

      // recur for the right subtree by increasing horizontal distance by 1
      printVertical(node.right, dist + 1, map);
  }
```
Height of Tree
```java
int height(TreeNode node)
{
    if (node == NULL)
        return 0;
    else {
        int lheight = height(node.left);
        int rheight = height(node.right);
        return Math.max(lheight, rheight);
    }
}
```
Diameter of tree
```java
 public int diameterOfBinaryTree(TreeNode root) {
      if(root==null)
          return 0;
      int l = height(root.left);
      int r = height(root.right);
      return Math.max(l+r,Math.max(diameterOfBinaryTree(root.left),diameterOfBinaryTree(root.right)));
  }
```
Lowest Common Ancestor of Binary Tree
```java
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    if(root == null || root == p || root == q) {
        return root;
    }
    TreeNode left = lowestCommonAncestor(root.left, p, q);
    TreeNode right = lowestCommonAncestor(root.right, p, q);
    if(left == null) {
        return right; // go to the right way
    } else if(right == null) {
        return left; // go to the left way
    } else { // both left and right are not null, we found the result
        return root;
    }
}
```
Lowest Common Ancestor of Binary Search Tree
```java
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    TreeNode current = root;
    while(current!=null) {
        if(p.val < current.val && q.val < current.val) { // both values are smaller than root
            current = current.left; // LCA will be in left sub tree
        } else if(p.val > current.val && q.val > current.val) { // both values are larger than root
            current = current.right; // LCA will be in right sub tree
        } else {
            return current;
        }
    }
    return null; // LCA not found
}
```

 
  
